update A set a = 1 where id in (1, 2, 3) ; update A set a = 1 where id in (1, 2, 3) and A.if_del = 0
update A c set a = 1 where id in (1, 2, 3);update A c set a = 1 where id in (1, 2, 3) and c.if_del = 0
UPDATE table1 alias SET (column_name,column_name ) = ( SELECT (column_name, column_name) FROM table2 WHERE column_name = alias.column_name) WHERE column_name = VALUE;UPDATE table1 alias SET (column_name,column_name ) = ( SELECT (column_name, column_name) FROM table2 WHERE column_name = alias.column_name and table2.if_del = 0) WHERE column_name = VALUE and alias.if_del = 0
update runoob_tbl set runoob_title= replace( runoob_title , 'c++', 'python' ) where id in (select outer_id from A);update runoob_tbl set runoob_title= replace( runoob_title , 'c++', 'python' ) where id in (select outer_id from A  WHERE A.if_del = 0) and runoob_tbl.if_del = 0
update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' ) , a=?  + 1 , b=?;update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' ) , a=?  + 1 , b=? where runoob_tbl.if_del = 0
update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' )  where runoob_id  = 3;update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' )  where runoob_id  = 3 and runoob_tbl.if_del = 0
update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' );update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' ) where runoob_tbl.if_del=0
update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' ) , a=a  + 1 , b=c;update runoob_tbl set runoob_title=replace( runoob_title , 'c++', 'python' ) , a=a  + 1 , b=c where runoob_tbl.if_del=0
update t_course t, t_tx_test t2, ttt t3 set t.course_name = '1' and t2.name = '2' where t.course_name = '2';UPDATE t_course  t  ,  t_tx_test  t2  , ttt  t3 SET  t.course_name = '1' AND t2.name = '2' WHERE t.course_name = '2' and  t.if_del = 0	AND t2.if_del = 0 AND t3.if_del = 0
update t_course t join t_tx_test t2 join ttt t3 set t.course_name = '1' and t2.name = '2' where t.course_name = '2';UPDATE t_course t join t_tx_test t2 join ttt t3  SET t.course_name = '1' AND t2.name = '2' WHERE t.course_name = '2' and  t.if_del = 0	AND t2.if_del = 0 AND t3.if_del = 0
UPDATE  `table1` AS `dest`,  (  SELECT  *   FROM  `table2`  WHERE `id` = x  ) AS `src` SET `dest`.`col1` = `src`.`col1` WHERE `dest`.`id` = x;UPDATE  `table1` AS `dest` ,  ( SELECT  *   FROM  `table2`  WHERE `id` = x and `table2`.if_del=0 ) AS `src` SET `dest`.`col1` = `src`.`col1` WHERE `dest`.`id` = x and `dest`.if_del = 0
delete from score where id in (select outer_id from t1);delete from score where id in (select outer_id from t1 where t1.if_del=0) and score.if_del = 0
delete from A where id in (1, 2, 3);delete from A  where id in (1, 2, 3) and A.if_del = 0
delete from score where CREATE_TM  < date_add( now(),  interval 1 day )   and DEGREE  + 1  < 60 - 1;delete from score where CREATE_TM  < date_add( now(),  interval 1 day )   and DEGREE  + 1  < 60 - 1 and score.if_del = 0
delete from score where DEGREE  < 50;delete from score where DEGREE  < 50 and score.if_del = 0
delete from score where CREATE_TM  < now();delete from score   where CREATE_TM  < now() and score.if_del = 0
delete from score where CREATE_TM  < now(3);delete from score where CREATE_TM  < now(3)  and score.if_del = 0
delete from score where DEGREE  + 1  < 60 - 1;delete from score  where DEGREE  + 1  < 60 - 1  and score.if_del = 0
delete from score;delete from score where score.if_del = 0
select count(a) from a1 group by b having count(*) > 1 and c > 2;  select count(a) from a1 where a1.if_del = 0 group by b having count(*) > 1 and c > 2
select count(a.*) from a1;  select count(a.*) from a1 where a1.if_del = 0
select a.* from a1;  select a.* from a1 where a1.if_del = 0
select c, (select a from b where c > 1) from b2 where c < 1;  select c, (select a from b where c > 1 and b.if_del=0) from b2 where c < 1 and b2.if_del = 0
select c, (select c from b2 where a > 1) from b1 where c > 1;  select c, (select c from b2 where a > 1 and b2.if_del = 0) from b1 where c > 1 and b1.if_del = 0
select a from b where c > 1;  select a from b where c > 1 and b.if_del = 0
select * from a where a.a > 1;  select * from a where a.a > 1 and a.if_del = 0
select productline, ordervalue, round(percent_rank() over(order by ordervalue), 2) as percentile_rank from t t1;  select productline, ordervalue, round(percent_rank() over(order by ordervalue), 2) as percentile_rank from t t1 where t1.if_del = 0
select extract(year from date_add(now(), interval 2 day)) as plus2Day from dual where #{aaa} = b;  select extract(year from date_add(now(), interval 2 day)) as plus2Day from dual where #{aaa} = b
select '\'a\'' from dual; select '\'a\'' from dual
select timestampdiff(day, '2010-01-01', '2010-06-01') as result from dual;  select timestampdiff(day, '2010-01-01', '2010-06-01') as result from dual
select a from A where (select c from C) and (select d from D);  select a from A where (select c from C where C.if_del = 0) and (select d from D where D.if_del=0) and A.if_del = 0
select b from a where (select c from C) and (select d from D);  select b from a where (select c from C where C.if_del=0) and (select d from D where D.if_del = 0) and a.if_del = 0
select a, b, (select c from C) as c from AB;  select a, b, (select c from C where C.if_del = 0) as c from AB where AB.if_del = 0
select employee_name , `count` , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between interval 30 second preceding and unbounded following    )   as second_highest_salary from basic_pays;  select employee_name , `count` , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between interval 30 second preceding and unbounded following    )   as second_highest_salary from basic_pays where basic_pays.if_del=0
select employee_name , `count` , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays;  select employee_name , `count` , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays where basic_pays.if_del = 0
select employee_name , department , salary , nth_value ( employee_name  , 2  ) OVER ( PARTITION BY DEPARTMENT  order by salary  desc range BETWEEN unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays;  select employee_name , department , salary , nth_value ( employee_name  , 2  ) OVER ( PARTITION BY DEPARTMENT  order by salary  desc range BETWEEN unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays where basic_pays.if_del = 0
select employee_name , department , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays;  select employee_name , department , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays where basic_pays.if_del = 0
select employee_name , salary , nth_value ( employee_name  , 2  ) over ( order by salary  desc )   as second_highest_salary from basic_pays;  select employee_name , salary , nth_value ( employee_name  , 2  ) over ( order by salary  desc )   as second_highest_salary from basic_pays where basic_pays.if_del=0
select name , score , row_number (  ) over ( order by score   )   as row_num, cume_dist (  ) over ( order by score   )   as cume_dist_val from scores;  select name , score , row_number (  ) over ( order by score   )   as row_num, cume_dist (  ) over ( order by score   )   as cume_dist_val from scores where scores.if_del = 0
select val , dense_rank (  ) over ( order by val   )   as my_rank from rankdemo;  select val , dense_rank (  ) over ( order by val   )   as my_rank from rankdemo where rankdemo.if_del=0
select sales_employee , fiscal_year , sale , dense_rank (  ) over ( partition by fiscal_year  order by sale  desc )   as sales_rank from sales;  select sales_employee , fiscal_year , sale , dense_rank (  ) over ( partition by fiscal_year  order by sale  desc )   as sales_rank from sales where sales.if_del=0
select employee_name , hours , first_value ( employee_name   ) over ( order by hours   )   as least_over_time from overtime;select employee_name , hours , first_value ( employee_name   ) over ( order by hours   )   as least_over_time from overtime where overtime.if_del = 0
select employee_name , department , hours , first_value ( employee_name   ) over ( partition by department  order by hours   )   as least_over_time from overtime;select employee_name , department , hours , first_value ( employee_name   ) over ( partition by department  order by hours   )   as least_over_time from overtime where overtime.if_del = 0
select productline , order_year , order_value , lag ( order_value  , 1  ) over ( partition by productline  order by order_year   )   as prev_year_order_value from productline_sales;select productline , order_year , order_value , lag ( order_value  , 1  ) over ( partition by productline  order by order_year   )   as prev_year_order_value from productline_sales where productline_sales.if_del=0
select employee_name , hours , last_value ( employee_name   ) over ( order by hours   range between unbounded preceding  and unbounded following    )   as highest_overtime_employee from overtime;  select employee_name , hours , last_value ( employee_name   ) over ( order by hours   range between unbounded preceding  and unbounded following    )   as highest_overtime_employee from overtime where overtime.if_del=0
select employee_name , department , hours , last_value ( employee_name   ) over ( partition by department  order by hours   range between unbounded preceding  and unbounded following    )   as most_overtime_employee from overtime;  select employee_name , department , hours , last_value ( employee_name   ) over ( partition by department  order by hours   range between unbounded preceding  and unbounded following    )   as most_overtime_employee from overtime where overtime.if_del=0
select customername , orderdate , lead ( orderdate  , 1  ) over ( partition by customernumber  order by orderdate   )   as nextorderdate from orders join customers;  select customername , orderdate , lead ( orderdate  , 1  ) over ( partition by customernumber  order by orderdate   )   as nextorderdate from orders join customers where orders.if_del=0 and customers.if_del=0
select employee_name , salary , nth_value ( employee_name  , 2  ) over ( order by salary  desc )   as second_highest_salary from basic_pays;  select employee_name , salary , nth_value ( employee_name  , 2  ) over ( order by salary  desc )   as second_highest_salary from basic_pays where basic_pays.if_del=0
select employee_name , department , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays;  select employee_name , department , salary , nth_value ( employee_name  , 2  ) over ( partition by department  order by salary  desc range between unbounded preceding  and unbounded following    )   as second_highest_salary from basic_pays where basic_pays.if_del=0
select val , ntile ( 3  ) over ( order by val   )   as group_no from ntiledemo;  select val , ntile ( 3  ) over ( order by val   )   as group_no from ntiledemo where ntiledemo.if_del = 0
select productline , order_year , order_value , ntile ( 3  ) over ( partition by order_year  order by order_value  desc )   as product_line_group from productline_sales;  select productline , order_year , order_value , ntile ( 3  ) over ( partition by order_year  order by order_value  desc )   as product_line_group from productline_sales where productline_sales.if_del=0
select val , rank (  ) over ( order by val   )   as my_rank from rankdemo;  select val , rank (  ) over ( order by val   )   as my_rank from rankdemo where rankdemo.if_del=0
select sales_employee , fiscal_year , sale , rank (  ) over ( partition by fiscal_year  order by sale  desc )   as sales_rank from sales;  select sales_employee , fiscal_year , sale , rank (  ) over ( partition by fiscal_year  order by sale  desc )   as sales_rank from sales where sales.if_del=0
select row_number (  ) over ( order by productname   )   as row_num, productname , msrp  from products   order by productname;  select row_number (  ) over ( order by productname   )   as row_num, productname , msrp  from products  where products.if_del=0 order by productname
select productline , productname , quantityinstock , row_number (  ) over ( partition by productline  order by quantityinstock  desc )   as row_num from products;  select productline , productname , quantityinstock , row_number (  ) over ( partition by productline  order by quantityinstock  desc )   as row_num from products where products.if_del=0
select id , name , row_number (  ) over ( partition by name  order by name   )   as row_num from rownumberdemo;  select id , name , row_number (  ) over ( partition by name  order by name   )   as row_num from rownumberdemo where rownumberdemo.if_del=0
select *  from  (  select productname , msrp , row_number (  ) over ( order by msrp   )   as row_num from products   )  t  where row_num  < 11  and row_num  > 20;  select *  from  (  select productname , msrp , row_number (  ) over ( order by msrp   )   as row_num from products where  products.if_del=0 )  t  where row_num  < 11  and row_num  > 20
select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE  RELEASE ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( ?, ?)  group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = ?  and RELEASE.MODIFY_TM  = ?   and T.FLIGHT_ID in ( ?, ?)  order by RELEASE.CREATE_TIME   limit ?; select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE RELEASE ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( ?, ?) and T_DISPATCH_FLIGHT_RELEASE.if_del = 0 group by FLIGHT_ID )  T where RELEASE.FLIGHT_ID  = ?  and RELEASE.MODIFY_TM  = ?   and T.FLIGHT_ID in ( ?, ?)  and RELEASE.if_del = 0  order by RELEASE.CREATE_TIME   limit ?
select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE  RELEASE join (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( ?, ?)  group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = ?  and RELEASE.MODIFY_TM  = ?   and T.FLIGHT_ID in ( ?, ?)  order by RELEASE.CREATE_TIME   limit ?; select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE  RELEASE join  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE  where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( ?, ?) and T_DISPATCH_FLIGHT_RELEASE.if_del = 0 group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = ?  and RELEASE.MODIFY_TM  = ?   and T.FLIGHT_ID in ( ?, ?) and  RELEASE.if_del = 0  order by RELEASE.CREATE_TIME   limit ?
select  case a  when b  + 1  then '1' when b  + 2  then '2' else '3' end as A from  (  select 2 as a, 1 as b from dual   where a  = ?  )  A  where a  = ?; select  case a  when b  + 1  then '1' when b  + 2  then '2' else '3' end as A from  (  select 2 as a, 1 as b from dual   where a  = ? )  A  where a  = ?
select  group_concat (  DELETE_FLAG ,  CREATOR  + '1'  separator '%' ) as a from t_fp_day_navigation   group by DELETE_FLAG, CREATOR having  group_concat (  DELETE_FLAG  + '1'  order by CREATOR  asc separator '%' ) != ''  order by  ( '1' + DELETE_FLAG   )  desc;select  group_concat (  DELETE_FLAG ,  CREATOR  + '1'  separator '%' ) as a from t_fp_day_navigation  where t_fp_day_navigation.if_del=0 group by DELETE_FLAG, CREATOR having  group_concat (  DELETE_FLAG  + '1'  order by CREATOR  asc separator '%' ) != ''  order by  ( '1' + DELETE_FLAG   )  desc
select *  from STUDENT   order by CLASS  desc, NAME  asc; select *  from STUDENT where  STUDENT.if_del=0 order by CLASS  desc, NAME  asc
select a  from  (  select *  from A   )  aa  where a  > 100  and a  < 50; select a  from  (  select *  from A where A.if_del=0  )  aa  where a  > 100  and a  < 50
select date_add( A.date ,  interval 1 day )  as tomorrow from  (  select *  from a   )  A; select date_add( A.date ,  interval 1 day )  as tomorrow from  (  select *  from a  where a.if_del=0 )  A
select 1 as a from dual; select 1 as a from dual
select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE  RELEASE ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( 100838874, 100813825)  group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = T.FLIGHT_ID   and RELEASE.MODIFY_TM  = T.LATEAST_TIME    order by RELEASE.CREATE_TIME; select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE RELEASE ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( 100838874, 100813825) and T_DISPATCH_FLIGHT_RELEASE.if_del = 0 group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = T.FLIGHT_ID   and RELEASE.MODIFY_TM  = T.LATEAST_TIME   and RELEASE.if_del = 0  order by RELEASE.CREATE_TIME
select ts_user.* , ts_role.create_time , ts_role.create_user  from ts_user  join ts_role  on ts_user.user_id  = ts_role.create_user    where  (  select c.a  from  (  select 1 as a from dual   )  c  )  > ts_role.a   and  (  select c.a  from  (  select true as a from dual   )  c  ); select ts_user.* , ts_role.create_time , ts_role.create_user  from ts_user  join ts_role  on ts_user.user_id  = ts_role.create_user   where  (  select c.a  from  (  select 1 as a from dual  )  c  )  > ts_role.a   and  (  select c.a  from  (  select true as a from dual )  c  ) and  ts_user.if_del = 0  and ts_role.if_del=0
select distinct SNO  from SCORE  SCX  where  not exists  (  select *  from SCORE  SCY  where SCY.SNO  = '2002151122'  and  not exists  (  select *  from SCORE  SCZ  where SCZ.SNO  = SCX.Sno   and SCZ.CNO  = SCY.CNO    )   ); select distinct SNO  from SCORE  SCX  where  not exists  (  select *  from SCORE  SCY  where SCY.SNO  = '2002151122'  and  not exists  (  select *  from SCORE  SCZ  where SCZ.SNO  = SCX.Sno   and SCZ.CNO  = SCY.CNO and SCZ.if_del=0   ) and SCY.if_del = 0   ) and SCX.if_del=0
select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE  RELEASE ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( ?, ?)  group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = T.FLIGHT_ID   and RELEASE.MODIFY_TM  = T.LATEAST_TIME; select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE RELEASE ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( ?, ?) and T_DISPATCH_FLIGHT_RELEASE.if_del = 0 group by FLIGHT_ID )  T where RELEASE.FLIGHT_ID  = T.FLIGHT_ID   and RELEASE.MODIFY_TM  = T.LATEAST_TIME and RELEASE.if_del = 0
select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE  RELEASE ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( #{flightId1}, #{flightId2}, #{flightId3})  group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = T.FLIGHT_ID   and RELEASE.MODIFY_TM  = T.LATEAST_TIME; select T.FLIGHT_ID , ROUTE_TOWARDS  from T_DISPATCH_FLIGHT_RELEASE RELEASE  ,  (  select FLIGHT_ID , max( MODIFY_TM  ) as LATEAST_TIME from T_DISPATCH_FLIGHT_RELEASE   where DELETE_FLAG  = 'N'  and FLIGHT_ID in ( #{flightId1}, #{flightId2}, #{flightId3}) and T_DISPATCH_FLIGHT_RELEASE.if_del = 0  group by FLIGHT_ID )  T  where RELEASE.FLIGHT_ID  = T.FLIGHT_ID   and RELEASE.MODIFY_TM  = T.LATEAST_TIME 	and RELEASE.if_del = 0
select a , b  from tab2  t cross join tab3   left join tab3  on tab4.e  = tab2.e,  (  select *  from tab5   )  t5  where t.m  = ?  and  exists  (  select 1 from tab4  t4  where t1.n  = t4.n   )   and t.tm  >= '2016-11-11'; select a , b  from tab2  t cross join tab3 left join tab3  on tab4.e  = tab2.e ,  (  select *  from tab5 where tab5.if_del=0  )  t5  where t.m  = ?  and  exists  (  select 1 from tab4  t4  where t1.n  = t4.n and t4.if_del=0  )   and t.tm  >= '2016-11-11' and t.if_del=0 and tab3.if_del=0   and tab3.if_del=0
select SNO , SNAME , SBIRTHDAY , date_format( now(), 'yyyy' )  as anow from STUDENT   where date_format( SBIRTHDAY , 'yyyy' )  =  (  select date_format( SBIRTHDAY , 'yyyy' )  as t from STUDENT   where SNO  = '108'  ); select SNO , SNAME , SBIRTHDAY , date_format( now(), 'yyyy' )  as anow from STUDENT   where date_format( SBIRTHDAY , 'yyyy' )  =  (  select date_format( SBIRTHDAY , 'yyyy' )  as t from STUDENT   where SNO  = '108' and STUDENT.if_del=0 ) and STUDENT.if_del = 0
select SNO , CNO  from SCORE where DEGREE not in  (  select max( DEGREE  ) as maxd from SCORE   ); select SNO , CNO  from SCORE   where DEGREE not in  (  select max( DEGREE  ) as maxd from SCORE  where SCORE.if_del=0 ) and SCORE.if_del=0
select a.SNO , a.CNO  from SCORE a,(select max( DEGREE  ) as MAX from SCORE)  b  where b.MAX  = SCORE.DEGREE; select a.SNO , a.CNO  from SCORE  a , (select max(DEGREE) as MAX from SCORE where SCORE.if_del=0 ) b where b.MAX= SCORE.DEGREE and a.if_del=0
select 1 from  (  select a  from dual  d1 join dual  d2 on d1.id  = d2.outer_id    )  t1  where  (  select 2 from dual   )  > t1.a; select 1 from  (  select a  from dual  d1 join dual  d2 on d1.id  = d2.outer_id )  t1  where  (  select 2 from dual )  > t1.a
select 1 from dual   where  (  select c  as d from t1   where id  = 5  )  >  (  select a  from t2   where id  = 6  ); select 1 from dual   where  (  select c  as d from t1   where id  = 5 and t1.if_del=0 )  >  (  select a  from t2   where id  = 6 and t2.if_del=0)
select 1 from dual  union  select 2 from dual  union  select 3 from dual  union  select 4 from dual  union  select 5 from dual; select 1 from dual union  select 2 from dual  union  select 3 from dual  union  select 4 from dual union  select 5 from dual
select 1 from dual  minus  select 2 from dual  union  select 3 from dual; select 1 from dual minus  select 2 from dual union  select 3 from dual
select *  from ts_user   where  (  select c.a  from  (  select true as a from dual )  c  ) and  ( select c.a  from  (select true as a from dual )  c  ); select *  from ts_user   where  (  select c.a  from  (  select true as a from dual  )  c  ) and  ( select c.a  from  (select true as a from dual)  c  ) and ts_user.if_del=0
select *  from t1  , t2   where t1.a  =  (  select b  from t2   where t1.c  = t2.c   ); select *  from t1  , t2  where t1.a  =  (  select b  from t2   where t1.c  = t2.c  and t2.if_del = 0 ) and t1.if_del = 0 AND t2.if_del = 0
select *  from ts_user   where  (  select c.a  from  (  select true as a from dual   )  c  ); select *  from ts_user   where  (  select c.a  from  (  select true as a from dual )  c ) and ts_user.if_del=0
select *  from ts_user   where  (  select 1 from dual   )  = 1; select *  from ts_user   where  (  select 1 from dual  ) = 1 and ts_user.if_del=0
select now() as a from dual; select now() as a from dual
select 1 from dual;  select 1 from dual
select - ( 1 * SCORE   )  as score from dual; select - ( 1 * SCORE   )  as score from dual
select *  from SCORE   where DEGREE  > 60  and DEGREE  < 80; select *  from SCORE   where DEGREE  > 60  and DEGREE  < 80 and SCORE.if_del = 0
select *  from SCORE   order by CNO  asc, DEGREE  desc; select *  from SCORE  where SCORE.if_del = 0 order by CNO  asc, DEGREE  desc
select avg( DEGREE  ) as avgd from SCORE   where CNO  = '3-105'; select avg( DEGREE  ) as avgd from SCORE   where CNO  = '3-105' and SCORE.if_del=0
select avg( DEGREE  ) as avgd from SCORE   where CNO  like '3%'  group by CNO having count( CNO  ) > 5; select avg( DEGREE  ) as avgd from SCORE   where CNO  like '3%'  and SCORE.if_del=0 group by CNO having count( CNO  ) > 5
select SNO  from SCORE   group by SNO having min( DEGREE  ) > 70  and max( DEGREE  ) < 90; select SNO  from SCORE where  SCORE.if_del=0  group by SNO having min( DEGREE  ) > 70  and max( DEGREE  ) < 90
select STUDENT.SNAME , SCORE.CNO , SCORE.DEGREE  from STUDENT  , SCORE   where STUDENT.SNO  = SCORE.SNO; select STUDENT.SNAME , SCORE.CNO , SCORE.DEGREE  from STUDENT, SCORE where STUDENT.SNO  = SCORE.SNO and  STUDENT.if_del = 0 AND SCORE.if_del = 0
select STUDENT.SNAME , COURSE.CNAME , SCORE.DEGREE  from SCORE  , COURSE   , STUDENT   where STUDENT.SNO  = SCORE.SNO   and SCORE.CNO  = COURSE.CNO; SELECT STUDENT.SNAME, COURSE.CNAME, SCORE.DEGREE FROM SCORE , COURSE , STUDENT WHERE STUDENT.SNO = SCORE.SNO AND SCORE.CNO = COURSE.CNO and SCORE.if_del =0 and COURSE.if_del = 0  and student.if_del=0
select SCORE.SNO , SCORE.CNO , GRADE.RANK  from SCORE  , GRADE   where SCORE.DEGREE  >= GRADE.LOW   and SCORE.DEGREE  <= GRADE.UPP; SELECT SCORE.SNO, SCORE.CNO, GRADE.RANK FROM SCORE , GRADE  WHERE SCORE.DEGREE >= GRADE.LOW AND SCORE.DEGREE <= GRADE.UPP and SCORE.if_del = 0 and GRADE.if_del = 0
select *  from SCORE   where SCORE.CNO  = '3-105'  and  (  select DEGREE  from SCORE   where SNO  = '109'  and CNO  = '3-105'   )  < SCORE.DEGREE; select *  from SCORE   where SCORE.CNO  = '3-105'  and  ( select DEGREE  from SCORE   where SNO  = '109'  and CNO  = '3-105' and  SCORE.if_del=0 )  < SCORE.DEGREE and SCORE.if_del=0
select *  from SCORE   where SCORE.CNO  = ?  and  (  select DEGREE  from SCORE   where SNO  = '?'  and CNO  = '3-105'   )  < SCORE.DEGREE; select *  from SCORE   where SCORE.CNO  = ?  and  (  select DEGREE  from SCORE   where SNO  = '?'  and CNO  = '3-105' and SCORE.if_del=0 )  < SCORE.DEGREE and SCORE.if_del=0
select *  from SCORE  ,  (  select SNO , max( DEGREE  ) as MAXDEGREE from SCORE   group by SNO having count( *  ) > 1  )  b  where b.SNO  = a.SNO   and b.MAXDEGREE  > a.DEGREE; select *  from  SCORE  ,  (  select SNO , max( DEGREE  ) as MAXDEGREE from SCORE where SCORE.if_del=0 group by SNO having count( *  ) > 1  )  b  where b.SNO  = a.SNO   and b.MAXDEGREE  > a.DEGREE  and SCORE.if_del = 0
select *  from SCORE  a  where  (  (  select max( b.DEGREE  ) as maxd from SCORE  b  where a.SNO  = b.SNO   )  > a.DEGREE   )  and  ( a.SNO in  (  select c.SNO  from SCORE   group by c.SNO having count( *  ) > 1  )  ); select *  from SCORE  a  where  (  (  select max( b.DEGREE  ) as maxd from SCORE  b  where a.SNO  = b.SNO and b.if_del=0  )  > a.DEGREE   )  and  ( a.SNO in  (  select c.SNO  from SCORE where SCORE.if_del=0  group by c.SNO having count( *  ) > 1  )  ) and a.if_del=0
select *  from SCORE   where  (  select DEGREE  from SCORE   where SNO  = '109'  and CNO  = '3-105'   )  < DEGREE; select *  from SCORE   where  (  select DEGREE  from SCORE   where SNO  = '109'  and CNO  = '3-105' and  SCORE.if_del=0  )  < DEGREE and  SCORE.if_del=0
select *  from SCORE   where CNO in  (  select CNO  from COURSE   where  (  select TNO  from TEACHER   where TNAME  = '张旭'  )  = COURSE.TNO   ); select *  from SCORE   where CNO in  (  select CNO  from COURSE   where  (  select TNO  from TEACHER   where TNAME  = '张旭' AND TEACHER.if_del = 0  )  = COURSE.TNO and COURSE.if_del=0 ) and SCORE.if_del=0
select TNAME  from TEACHER   where TNO in  (  select TNO  from COURSE   where CNO in  (  select CNO  from SCORE   group by CNO having count( *  ) > 5  )  ); select TNAME  from TEACHER   where TNO in  (  select TNO  from COURSE where CNO in ( select CNO  from SCORE where SCORE.if_del = 0 group by CNO having count( *  ) > 5 ) and COURSE.if_del=0 ) and TEACHER.if_del=0
select *  from SCORE  a  where a.CNO  = '3-105'  and a.DEGREE  >=  (  select min( DEGREE  ) as c from SCORE  b  where b.CNO  = '3-245'  )    order by DEGREE  desc; select *  from SCORE  a  where a.CNO  = '3-105'  and a.DEGREE  >=  (  select min( DEGREE  ) as c from SCORE  b  where b.CNO  = '3-245' and b.if_del=0) and a.if_del=0   order by DEGREE  desc
select SNO , a.CNO , DEGREE  from SCORE  a ,  (  select avg( DEGREE  ) as AVGG, CNO  from SCORE   group by CNO )  b  where a.CNO  = b.CNO   and a.DEGREE  < b.AVGG; select SNO , a.CNO , DEGREE  from SCORE a , (  select avg( DEGREE  ) as AVGG, CNO  from SCORE where  SCORE.if_del=0 group by CNO )  b where a.CNO  = b.CNO   and a.DEGREE  < b.AVGG and a.if_del=0
select *  from SCORE  a  where  (  select avg( b.DEGREE  ) as a from SCORE  b  where a.CNO  = b.CNO   )  > a.DEGREE; select *  from SCORE  a  where  (  select avg( b.DEGREE  ) as a from SCORE  b  where a.CNO  = b.CNO and b.if_del=0  )  > a.DEGREE and a.if_del=0
select TNAME , DEPART  from TEACHER   where TEACHER.TNO not in  (  select distinct TNO  from COURSE   ); select TNAME , DEPART  from TEACHER   where TEACHER.TNO not in  (  select distinct TNO  from COURSE  where COURSE.if_del=0 ) and TEACHER.if_del=0
select *  from STUDENT   where SSEX  =  (  select SSEX  from STUDENT   where SNAME  = '李军'  )   and CLASS  =  (  select CLASS  from STUDENT   where SNAME  = '李军'  )    and SNAME  != '李军'; select *  from STUDENT where SSEX  =  (select SSEX from STUDENT where SNAME  = '李军' and STUDENT.if_del=0 )  and CLASS = (select CLASS from STUDENT where SNAME  = '李军' and STUDENT.if_del=0) and SNAME  != '李军' and STUDENT.if_del=0
select *  from SCORE  a  where  (  select count( *  ) as a from SCORE  b  where a.CNO  = b.CNO   and a.DEGREE  < b.DEGREE    )  < 2; select *  from SCORE  a  where  (  select count( *  ) as a from SCORE  b  where a.CNO  = b.CNO   and a.DEGREE  < b.DEGREE  and b.if_del=0 )  < 2 and a.if_del=0
select *  from SCORE  minus  select *  from SCORE  a  where  (  select count( *  ) as a from SCORE  b  where a.CNO  = b.CNO   and a.DEGREE  < b.DEGREE )  < 1; select * from SCORE where SCORE.if_del=0 minus select * from SCORE a where (select count(*) as a from SCORE  b  where a.CNO  = b.CNO   and a.DEGREE  < b.DEGREE  and b.if_del=0 )  < 1 and a.if_del = 0
select SNAME  from STUDENT   where  exists  (  select *  from SCORE   where SNO  = STUDENT.SNO   and CNO  = '1'   ); select SNAME  from STUDENT where exists  (  select *  from SCORE where SNO  = STUDENT.SNO and CNO  = '1' and SCORE.if_del=0) and STUDENT.if_del=0
select *  from  (  select 'rupert', 'somewhere', '022' from dual   )  tmp  where  not exists  (  select name  from table_listnames   where name  = 'rupert'  and 1 = 2   )  limit 1; select * from  (  select 'rupert', 'somewhere', '022' from dual )  tmp  where  not exists  (  select name  from table_listnames   where name  = 'rupert'  and 1 = 2 and table_listnames.if_del=0 )  limit 1
select a , b from tab2 t left join tab3 on tab2.c = tab3.c and tab2.d = tab2.c, (select * from tab5) t5 where t.m  = ?  and  exists  (  select 1 from tab4  t4  where t1.n  = t4.n   )   and t.tm  >= '2016-11-11'; select a , b  from tab2  t left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c , (select *  from tab5 where tab5.if_del=0)  t5  where t.m  = ?  and  exists (select 1 from tab4 t4 where t1.n = t4.n and t4.if_del=0) and t.tm  >= '2016-11-11' AND t.if_del = 0 AND tab3.if_del = 0
select *  from A   where a  is null; select *  from A   where a  is null and A.if_del = 0
select *  from A   where a  is not null; select *  from A where a  is not null and A.if_del=0
select  case a  when b + 1  then '1' when b  + 2  then '2' else '3' end as A from  (  select 2 as a, 1 as b from dual   )  A; select  case a  when b  + 1  then '1' when b  + 2  then '2' else '3' end as A from  (select 2 as a, 1 as b from dual )  A
select t1.* , t2.*  from t1, t2   where t1.id  = t2.outerId; select t1.* , t2.*  from t1, t2 where t1.id  = t2.outerId and  t1.if_del = 0 and t2.if_del=0
select *  from A   where a  = 1.12; select *  from A where a  = 1.12 and A.if_del=0
select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c     ,  (  select *  from tab5   )  t5; select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c , (select *  from tab5 where tab5.if_del=0) t5 where tab2.if_del = 0 AND tab3.if_del = 0
select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c     ,  (  select *  from tab5   )  t5  lock in share mode; select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c, (  select *  from tab5 where tab5.if_del=0)  t5 where  tab2.if_del = 0 AND tab3.if_del = 0 lock in share mode
select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c     ,  (  select *  from tab5   )  t5  for update; select a , b  from tab2 left join tab3 on tab2.c  = tab3.c   and tab2.d  = tab2.c ,  (  select *  from tab5 where tab5.if_del=0) t5  where tab2.if_del = 0 AND tab3.if_del = 0  for update
select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c     ,  (  select *  from tab5   )  t5  limit 1 for update; select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c , (  select *  from tab5 where tab5.if_del=0) t5 where tab2.if_del = 0 AND tab3.if_del = 0  limit 1 for update
select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c     ,  (  select *  from tab5   )  t5  limit 1 offset 2 for update; select a , b  from tab2  left join tab3  on tab2.c  = tab3.c   and tab2.d  = tab2.c , (  select *  from tab5  where tab5.if_del=0) t5 where tab2.if_del = 0 AND tab3.if_del = 0  limit 1 offset 2 for update
select * from (select 'rupert', 'some  where', '022' from dual ) tmp where not exists (select name  from table_listnames   where name  = 'rupert'  )  limit 1; select * from (select 'rupert', 'some  where', '022' from dual )  tmp  where  not exists  (  select name  from table_listnames   where name  = 'rupert'  and table_listnames.if_del=0 )  limit 1