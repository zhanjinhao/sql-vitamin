package cn.addenda.sql.vitamins.rewriter;

import cn.addenda.sql.vitamins.rewriter.util.DruidSQLUtils;
import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.proxy.jdbc.ConnectionProxy;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;

import java.sql.SQLException;

/**
 * @author addenda
 * @since 2023/4/30 19:09
 */
public abstract class ConnectionPrepareStatementInterceptor extends InterceptorAdapter {

  private final boolean removeEnter;

  protected ConnectionPrepareStatementInterceptor() {
    this.removeEnter = true;
  }

  protected ConnectionPrepareStatementInterceptor(boolean removeEnter) {
    this.removeEnter = removeEnter;
  }

  @Override
  public PreparedStatementProxy connection_prepareStatement(
    FilterChain chain, ConnectionProxy connection, String sql) throws SQLException {
    sql = process(sql);
    return super.connection_prepareStatement(chain, connection, sql);
  }

  @Override
  public PreparedStatementProxy connection_prepareStatement(
    FilterChain chain, ConnectionProxy connection, String sql, int autoGeneratedKeys) throws SQLException {
    sql = process(sql);
    return super.connection_prepareStatement(chain, connection, sql, autoGeneratedKeys);
  }

  @Override
  public PreparedStatementProxy connection_prepareStatement(
    FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    sql = process(sql);
    return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency);
  }

  @Override
  public PreparedStatementProxy connection_prepareStatement(
    FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    sql = process(sql);
    return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  @Override
  public PreparedStatementProxy connection_prepareStatement(
    FilterChain chain, ConnectionProxy connection, String sql, int[] columnIndexes) throws SQLException {
    sql = process(sql);
    return super.connection_prepareStatement(chain, connection, sql, columnIndexes);
  }

  @Override
  public PreparedStatementProxy connection_prepareStatement(
    FilterChain chain, ConnectionProxy connection, String sql, String[] columnNames) throws SQLException {
    sql = process(sql);
    return super.connection_prepareStatement(chain, connection, sql, columnNames);
  }

  protected abstract String process(String sql);

  protected String removeEnter(String sql) {
    if (removeEnter) {
      return DruidSQLUtils.removeEnter(sql);
    }
    return sql;
  }

}
